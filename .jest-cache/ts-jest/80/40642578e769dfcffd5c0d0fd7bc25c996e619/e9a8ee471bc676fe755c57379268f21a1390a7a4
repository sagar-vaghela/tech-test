[["/Users/mac/Documents/Projects/tech-test/__tests__/footer.test.tsx",{"fileContent":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport Footer from '../src/components/Footer/index';\n\ntest('Footer is rendered correctly', () => {\n  render(<Footer />);\n  const linkElement = screen.getByText(/Copyright Tanah Air Studio/i);\n  expect(linkElement).toBeInTheDocument();\n});","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/components/Footer/index.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/components/Footer/index.tsx",{"fileContent":"import FooterIcon from '../Icons/Footerlogo.svg';\nimport { Typography } from '@material-ui/core';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport '../../css/footer.css';\n\nconst Footer = () => {\n  return (\n    <div className=\"footercontainer\" data-testid=\"footer\" > \n      <div className=\"left\">\n        <div className=\"LogoContainer\">\n          <img src={FooterIcon} alt=\"\" className=\"Logo\" />\n        </div>\n        <div className=\"desccontainer\">\n          <Typography className=\"desc\">\n            OurStudio is a digital agency UI / UX Design and Website Development located in Ohio,\n            United States of America\n          </Typography>\n        </div>\n        <div className=\"copyrightContainer\">\n          <Typography className=\"copyright\">Copyright Tanah Air Studio</Typography>\n        </div>\n      </div>\n      <div className=\"footercenter\">\n        <Typography variant=\"h5\" style={{ color: 'white', paddingBottom: '30px' }}>\n          Our Social Media\n        </Typography>\n        <div className=\"media\">\n          <Typography variant=\"h6\" style={{ color: 'white', paddingBottom: '10px' }}>\n            Facebook\n          </Typography>\n          <Typography variant=\"h6\" style={{ color: 'white', paddingBottom: '10px' }}>\n            Twitter\n          </Typography>\n          <Typography variant=\"h6\" style={{ color: 'white', paddingBottom: '10px' }}>\n            Instagram\n          </Typography>\n          <Typography variant=\"h6\" style={{ color: 'white', paddingBottom: '10px' }}>\n            Youtube\n          </Typography>\n        </div>\n      </div>\n      <div className=\"footerright\">\n        <Typography variant=\"h5\" style={{ color: 'white', paddingBottom: '25px' }}>\n          Contact\n        </Typography>\n        <div className=\"medialist\">\n          <div className=\"contactItem\">\n            {' '}\n            <LocationOnIcon style={{ marginRight: '10px' }} />\n            <Typography variant=\"h6\">8819 Ohio St. South Gate, California 90280</Typography>\n          </div>\n          <div className=\"contactItem\">\n            {' '}\n            <MailOutlineIcon style={{ marginRight: '10px' }} />\n            <Typography variant=\"h6\">ourstudio@hello.com</Typography>\n          </div>\n          <div className=\"contactItem\">\n            {' '}\n            <PhoneIcon style={{ marginRight: '10px' }} />{' '}\n            <Typography variant=\"h6\">+271 386-647-3637</Typography>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Footer;\n","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/src/App.tsx",{"fileContent":"import { Footer, Header } from './components';\nimport { useGeolocated } from 'react-geolocated';\nimport ShoppingRoutes from './routes';\nimport { useEffect } from 'react';\nimport { Router, Routes } from 'react-router-dom';\n\nconst App = () => {\n  useEffect(() => {\n    if (performance.navigation.type === 1) {\n      // localStorage.removeItem('cartId');\n    }\n  });\n\n  const { coords, isGeolocationAvailable, isGeolocationEnabled } = useGeolocated({\n    positionOptions: {\n      enableHighAccuracy: false\n    },\n    userDecisionTimeout: 5000\n  });\n\n  const renderGeoLocation = () =>\n    !isGeolocationAvailable ? (\n      <div>Your browser does not support Geolocation</div>\n    ) : !isGeolocationEnabled ? (\n      <div>Geolocation is not enabled</div>\n    ) : coords != null ? (\n      <div>\n        You are at {coords.latitude}, {coords.longitude} (lat long).\n      </div>\n    ) : (\n      <div>Getting the location data&hellip; </div>\n    );\n\n  return (\n    <>\n      <Header renderlocation={renderGeoLocation()} />\n      <ShoppingRoutes />\n      <Footer />\n    </>\n  );\n};\nexport default App;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/components/index.ts","/Users/mac/Documents/Projects/tech-test/src/routes/index.tsx","/Users/mac/Documents/Projects/tech-test/src/components/Footer/index.tsx","/Users/mac/Documents/Projects/tech-test/src/components/Header/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/index.ts","/Users/mac/Documents/Projects/tech-test/src/lib/constants/routes.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/reducers/cartReducer.tsx",{"fileContent":"import {\n  GET_CARTS_FAILED,\n  GET_CARTS_STARTED,\n  GET_CARTS_SUCCEEDED\n} from '../lib/constants/actionTypes';\nimport initialState from './initialState';\n\nconst cartReducer = (state = initialState.cartData, action: { type: string; payload: object }) => {\n  switch (action.type) {\n    case GET_CARTS_STARTED:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case GET_CARTS_SUCCEEDED:\n      return {\n        ...state,\n        carts: action.payload,\n        isLoading: false\n      };\n    case GET_CARTS_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/lib/constants/actionTypes.ts","/Users/mac/Documents/Projects/tech-test/src/reducers/initialState.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/index.tsx",{"fileContent":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { configureStore } from './store';\n\nconst store = configureStore();\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/App.tsx","/Users/mac/Documents/Projects/tech-test/src/reportWebVitals.ts","/Users/mac/Documents/Projects/tech-test/src/store/index.ts","/Users/mac/Documents/Projects/tech-test/src/components/index.ts","/Users/mac/Documents/Projects/tech-test/src/routes/index.tsx","/Users/mac/Documents/Projects/tech-test/src/reducers/index.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/actions/cartActions.tsx",{"fileContent":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IAddCart } from '../interfaces';\nimport {\n  ADD_CART_STARTED,\n  ADD_CART_SUCCEEDED,\n  ADD_CART_FAILED,\n  UPDATE_CART_STARTED,\n  UPDATE_CART_SUCCEEDED,\n  UPDATE_CART_FAILED,\n  GET_CARTS_STARTED,\n  GET_CARTS_SUCCEEDED,\n  GET_CARTS_FAILED\n} from '../lib/constants/actionTypes';\nimport * as ProductService from '../services/api';\n\n//Add to Cart\nconst addCartStarted = () => ({\n  type: ADD_CART_STARTED\n});\n\nconst addCartSucceeded = (data: IAddCart) => ({\n  type: ADD_CART_SUCCEEDED,\n  payload: data\n});\n\nconst addCartFailed = (error: string) => ({\n  type: ADD_CART_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const addCart =\n  (payload: IAddCart): any =>\n  async (\n    dispatch: (arg0: { type: string; payload?: string | IAddCart; error?: boolean }) => void\n  ) => {\n    dispatch(addCartStarted());\n    await ProductService.addCart(payload)\n      .then((res) => {\n        localStorage.setItem('cartId', res.id);\n        dispatch(addCartSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(addCartFailed('error.response'));\n      });\n  };\n\n//update to Cart\nconst updateCartStarted = () => ({\n  type: UPDATE_CART_STARTED\n});\n\nconst updateCartSucceeded = (data: IAddCart) => ({\n  type: UPDATE_CART_SUCCEEDED,\n  payload: data\n});\n\nconst updateCartFailed = (error: string) => ({\n  type: UPDATE_CART_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const updateCart =\n  (cartId: string | number, payload: IAddCart): any =>\n  async (dispatch: any) => {\n    dispatch(updateCartStarted());\n    await ProductService.updateCart(cartId, payload)\n      .then((res) => {\n        dispatch(updateCartSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(updateCartFailed('error.response'));\n      });\n  };\n\n//get to Carts\nconst getCartsStarted = () => ({\n  type: GET_CARTS_STARTED\n});\n\nconst getCartsSucceeded = (data: string) => ({\n  type: GET_CARTS_SUCCEEDED,\n  payload: data\n});\n\nconst getCartsFailed = (error: string) => ({\n  type: GET_CARTS_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getCarts =\n  (cartId: string | number): any =>\n  async (dispatch: any) => {\n    dispatch(getCartsStarted());\n    await ProductService.getCarts(cartId)\n      .then((res) => {\n        console.log('res', res);\n\n        dispatch(getCartsSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(getCartsFailed('error.response'));\n      });\n  };\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts","/Users/mac/Documents/Projects/tech-test/src/lib/constants/actionTypes.ts","/Users/mac/Documents/Projects/tech-test/src/services/api/index.ts","/Users/mac/Documents/Projects/tech-test/src/services/api/api.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/containers/Home/Hero.tsx",{"fileContent":"import Typography from '@material-ui/core/Typography';\nimport { Button } from '@material-ui/core';\nimport SlideImage from '../../components/image/image.svg';\nimport { Link } from 'react-router-dom';\n\nconst Hero = () => {\n  return (\n    <div className=\"container\" data-testid=\"hero\">\n      <div className=\"left\">\n        <div className=\"left-wrapper\">\n          <Typography variant=\"h2\">\n            Sort out Your <br /> Spring Look\n          </Typography>\n          <Typography variant=\"subtitle1\">\n            We will help to develop every smallest thing into a <br />\n            big one for your company.\n          </Typography>\n          <div style={{ marginTop: '25px' }}>\n            <div style={{ marginTop: '25px' }}>\n              <Link to={`/products`} style={{ textDecoration: 'none' }}>\n                <Button\n                  variant=\"contained\"\n                  style={{ background: '#F86338', color: 'white', textTransform: 'none' }}\n                >\n                  {'Shop > '}\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"right\">\n        <div className=\"right-container\">\n          <img alt=\"\" src={SlideImage} />\n          <img alt=\"\" src={SlideImage} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Hero;\n","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/src/services/api/api.tsx",{"fileContent":"import { get, post, put } from '../fetch';\n\nconst handleCatchError = (error: string) => {\n  // Keeping this as it will help to throw Promise.reject error\n  throw error;\n};\n\nconst API_URL = 'https://fakestoreapi.com';\n\nexport const getProducts = async () => {\n  return get(`${API_URL}/products`).catch(handleCatchError);\n};\n\nexport const getSpecificProducts = async (product: string) => {\n  return get(`${API_URL}/products/category/${product}`).catch(handleCatchError);\n};\n\nexport const getCategories = async () => {\n  return get(`${API_URL}/products/categories`).catch(handleCatchError);\n};\n\nexport const getSingleProduct = async (id: string | undefined) => {\n  return get(`${API_URL}/products/${id}`).catch(handleCatchError);\n};\n\nexport const getCarts = async (id: number | string) => {\n  return get(`${API_URL}/carts/${id}`).catch(handleCatchError);\n};\n\nexport const addCart = async (payload: object) => {\n  return post(`${API_URL}/carts`, {\n    body: JSON.stringify(payload)\n  });\n};\n\nexport const updateCart = async (cartId: string | number, payload: object) => {\n  return put(`${API_URL}/carts/${cartId}`, {\n    body: JSON.stringify(payload)\n  });\n};\n\nexport const getProductSortProduct = async (sort: string) => {\n  return get(`${API_URL}/products?sort=${sort}`, {\n  });\n};\n\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/services/fetch/index.ts","/Users/mac/Documents/Projects/tech-test/src/services/fetch/fetch.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/containers/Home/HomeProducts.tsx",{"fileContent":"import Product from './Product';\n\nconst HomeProducts = () => {\n  return (\n    <div className=\"homeproduct-container\" data-testid=\"homeProducts\" >\n      <Product />\n      <Product />\n      <Product />\n      <Product />\n      <Product />\n      <Product />\n    </div>\n  );\n};\n\nexport default HomeProducts;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/containers/Home/Product.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/containers/Products/index.tsx",{"fileContent":"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport '../../css/product.css';\nimport Filter from '../../icons/filter.svg';\nimport ColorPlaceholder from '../../icons/colorPlaceholder.svg';\nimport RightArr from '../../icons/rightArrow.svg';\nimport Heart from '../../icons/heart.svg';\nimport Search from '../../icons/search.svg';\nimport Slider from '@material-ui/core/Slider';\nimport TextField from '@material-ui/core/TextField';\nimport Pagination from '@material-ui/lab/Pagination';\nimport Typography from '@material-ui/core/Typography';\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\nimport FormControl from '@material-ui/core/FormControl';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getProducts, getCategories, getSpecificProducts, getProductSortProduct } from '../../actions';\nimport usePagination from '../../lib/pagination';\nimport { Link } from 'react-router-dom';\nimport { IProduct, productType} from '../../interfaces';\nimport { Select, MenuItem } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    'label + &': {\n      marginTop: theme.spacing(3)\n    }\n  },\n  '& .MuiTextField-root': {\n    margin: theme.spacing(1),\n    width: '29ch'\n  },\n  '& > *': {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst Products = () => {\n  const classes = useStyles();\n  const [value, setValue] = useState<number | number[]>(0);\n  const [sortOrder, setSortOrder] = useState('asc');\n  const [products, setProducts] = useState([]);\n  const [category, setCategory] = useState([]);\n\n  const handleChangeSort = (event: React.ChangeEvent<unknown> ) => {\n    const sortProuct = (event.target as HTMLInputElement).value;\n    dispatch(getProductSortProduct(sortProuct));\n    setSortOrder(sortProuct);\n  };\n\n  const handleChange = (newValue: number | number[]) => {\n    setValue(newValue); \n  };\n\n  const dispatch = useDispatch();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const getProductsList = useSelector((state: any) => state.productData.products);\n  const getCategoriesList = useSelector((state: IProduct) => state.productData.product);\n\n  useEffect(() => {\n    dispatch(getProducts());\n    dispatch(getCategories());\n  }, []); \n\n  useEffect(() => {\n    if (getProductsList.length > 0 || getCategoriesList.length > 0) {\n      setProducts(getProductsList);\n      setCategory(getCategoriesList);\n    }\n  }, [getProductsList || getCategoriesList]);\n\n  useEffect(() => {\n    sliderProducts();\n  }, [value]);\n\n  useEffect(() => {\n    dispatch(getProductSortProduct(sortOrder));\n  }, [sortOrder]);\n\n  const sliderProducts = () => {\n    const sliderProduct = getProductsList.filter((item: { price: number }) => item.price <= value);\n    setProducts(sliderProduct);\n  };\n\n  const specificCategory = (selectCategory: string) => {\n    dispatch(getSpecificProducts(selectCategory));\n  };\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const searchValue = e.currentTarget.value;\n    const sliderProduct = getProductsList.filter((item: { title: string }) =>\n      item.title.includes(searchValue)\n    );\n\n    setProducts(sliderProduct);\n  };\n  const [page, setPage] = useState(1);\n  const PER_PAGE = 6;\n\n  const count = Math.ceil(products.length / PER_PAGE);\n  const _DATA = usePagination(products, PER_PAGE);\n\n  const handleChangePagination = (e: React.ChangeEvent<unknown>, p: number) => {\n    setPage(p);\n    _DATA.jump(p);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3} className={'containerClass'}>\n        <Grid item xs={3}>\n          <Grid container spacing={3}>\n            <Grid item xs={6} className={'titleClass'}>\n              Price\n            </Grid>\n            <Grid item xs={6} className={'alignRight'}>\n              <img src={Filter} alt=\"\" />\n            </Grid>\n          </Grid>\n\n          <Grid className={'rangeSliderClass'}>\n            <div>\n              <Slider min={0} max={1000} onChange={(event, value) => handleChange(value)} />\n              <Grid container spacing={3}>\n                <Grid item xs={6}>\n                  Range\n                </Grid>\n                <Grid item xs={6} className={'alignRight'}>\n                  $0-${value}\n                </Grid>\n              </Grid>\n            </div>\n          </Grid>\n\n          <Grid className={'colorSection'}>\n            <Grid item xs={12} className={'titleClass'}>\n              Color\n            </Grid>\n            <Grid className={'colorPlaceholder'}>\n              <Grid container spacing={3}>\n                <Grid item xs={3}>\n                  <img src={ColorPlaceholder} alt=\"\" />\n                </Grid>\n                <Grid item xs={3}>\n                  <img src={ColorPlaceholder} alt=\"\" />\n                </Grid>\n                <Grid item xs={3}>\n                  <img src={ColorPlaceholder} alt=\"\" />\n                </Grid>\n                <Grid item xs={3}>\n                  <img src={ColorPlaceholder} alt=\"\" />\n                </Grid>\n              </Grid>\n              <Grid container spacing={3}>\n                <Grid item xs={3}>\n                  <img src={ColorPlaceholder} alt=\"\" />\n                </Grid>\n                <Grid item xs={3}>\n                  <img src={ColorPlaceholder} alt=\"\" />\n                </Grid>\n                <Grid item xs={3}>\n                  <img src={ColorPlaceholder} alt=\"\" />\n                </Grid>\n                <Grid item xs={3}>\n                  <img src={ColorPlaceholder} alt=\"\" />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid className={'categarySection'}>\n            <Grid item xs={12} className={'titleClass'}>\n              Categories\n            </Grid>\n\n            {category.length > 0 &&\n              category?.map((category: string, i: number) => (\n                <Grid\n                  className={'categarySectionContent'}\n                  key={i}\n                  onClick={() => specificCategory(category)}\n                >\n                  <Grid container spacing={3} className={'categaryD'}>\n                    <Grid item xs={10}>\n                      {category}\n                    </Grid>\n                    <Grid item xs={2} className={'alignRight'}>\n                      <img src={RightArr} alt=\"\" />\n                    </Grid>\n                  </Grid>\n                </Grid>\n              ))}\n            <Grid className={'loadMore'}>Load More</Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={9}>\n          <Grid>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n              <div className=\"searchInput\">\n                <TextField\n                  id=\"outlined-search\"\n                  placeholder=\"Search Products\"\n                  type=\"search\"\n                  variant=\"outlined\"\n                  onChange={handleSearchChange}\n                />\n                <Grid className=\"searchInputIcon\">\n                  <img src={Search} alt=\"\" />\n                </Grid>\n              </div>\n            </form>\n          </Grid>\n          <Grid className={'pagignationShowDetails'}>\n            <Grid container spacing={3}>\n              <Grid item xs={6} className={'showItem'}>\n                Showing {products.length} Results\n              </Grid>\n              <Grid item xs={6} className={'alignRight'}>\n                <Grid className={'sortTxt'}>Sort By</Grid>\n                <Grid className={'sortTxtFilter'}>\n\n                  <FormControl>\n                    {/* <NativeSelect value={age} onChange={handleChange1}>\n                      <option value={10}>Ten</option>\n                      <option value={20}>Twenty</option>\n                      <option value={30}>Thirty</option>\n                    </NativeSelect> */}\n\n                    <Select\n                      labelId=\"demo-simple-select-label\"\n                      id=\"demo-simple-select\"\n                      value={sortOrder}\n                      onChange={handleChangeSort}\n                    >\n                      <MenuItem value={'asc'}>asc</MenuItem>\n                      <MenuItem value={'desc'}>desc</MenuItem>\n                    </Select>\n\n                  </FormControl>\n\n                </Grid>\n                <Grid className={'IconBtn'}>\n                  <FormatListBulletedIcon />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid className=\"imagListSection\">\n            <Grid container spacing={3} className={'ImgListContent'}>\n              {_DATA.currentData().map((product: productType, i: number) => (\n                <Grid item xs={4} key={i}>\n                  <Link to={`/product/${product.id}`} className=\"Link-Decorate\">\n                    <Grid className={'ImgContainer'}>\n                      <Grid className={'ContainerImg'}>\n                        <img height={296} src={product.image} alt=\"\" />\n                        <Grid className={'HeartImgSection'}>\n                          <img className={'HeartImg'} src={Heart} alt=\"\" />\n                        </Grid>\n                      </Grid>\n\n                      <Grid className={'ImgListContentDetails'}>\n                        <Typography className={'title'}>{product.category}</Typography>\n                        <Typography variant=\"h5\" className={'subTitle'}>\n                          {product.title}\n                        </Typography>\n                        <Typography variant=\"h5\" className={'prize'}>\n                          {product.price}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  </Link>\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n          <Grid className={'pagignationSection'}>\n            <Pagination\n              count={count}\n              size=\"large\"\n              page={page}\n              variant=\"outlined\"\n              shape=\"rounded\"\n              onChange={handleChangePagination}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\nexport default Products;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/actions/index.ts","/Users/mac/Documents/Projects/tech-test/src/lib/pagination.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts","/Users/mac/Documents/Projects/tech-test/src/actions/productActions.tsx","/Users/mac/Documents/Projects/tech-test/src/actions/cartActions.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/actions/productActions.tsx",{"fileContent":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  GET_PRODUCTS_FAILED,\n  GET_PRODUCTS_STARTED,\n  GET_PRODUCTS_SUCCEEDED,\n  GET_PRODUCT_DETAILS_FAILED,\n  GET_PRODUCT_DETAILS_STARTED,\n  GET_PRODUCT_DETAILS_SUCCEEDED,\n  GET_SPECIFIC_PRODUCTS_STARTED,\n  GET_SPECIFIC_PRODUCTS_SUCCEEDED,\n  GET_SPECIFIC_PRODUCTS_FAILED,\n  SELECT_CATEGORY_STARTED,\n  SELECT_CATEGORY_SUCCEEDED,\n  SELECT_CATEGORY_FAILED,\n  GET_PRODUCT_SORT_STARTED,\n  GET_PRODUCT_SORT_SUCCEEDED,\n  GET_PRODUCT_SORT_FAILED,\n} from '../lib/constants/actionTypes';\nimport * as ProductService from '../services/api';\n\n// Get Product\nconst getProductsStarted = () => ({\n  type: GET_PRODUCTS_STARTED\n});\n\nconst getProductsSucceeded = (data: object) => ({\n  type: GET_PRODUCTS_SUCCEEDED,\n  payload: data\n});\n\nconst getProductsFailed = (error: string) => ({\n  type: GET_PRODUCTS_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getProducts = (): any => async (dispatch: any) => {\n  dispatch(getProductsStarted());\n  await ProductService.getProducts()\n    .then((res) => {\n      dispatch(getProductsSucceeded(res));\n    })\n    .catch(() => {\n      dispatch(getProductsFailed('error.response'));\n    });\n};\n\n//Get Specific Product\nconst getSpecificProductsStarted = () => ({\n  type: GET_SPECIFIC_PRODUCTS_STARTED\n});\n\nconst getSpecificProductsSucceeded = (data: object) => ({\n  type: GET_SPECIFIC_PRODUCTS_SUCCEEDED,\n  payload: data\n});\n\nconst getSpecificProductsFailed = (error: string) => ({\n  type: GET_SPECIFIC_PRODUCTS_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getSpecificProducts =\n  (product: string): any =>\n  async (dispatch: any) => {\n    dispatch(getSpecificProductsStarted());\n    await ProductService.getSpecificProducts(product)\n      .then((res) => {\n        dispatch(getSpecificProductsSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(getSpecificProductsFailed('error.response'));\n      });\n  };\n\n//Get Categories\nconst getCategoriesStarted = () => ({\n  type: SELECT_CATEGORY_STARTED\n});\n\nconst getCategoriesSucceeded = (data: object) => ({\n  type: SELECT_CATEGORY_SUCCEEDED,\n  payload: data\n});\n\nconst getCategoriesFailed = (error: string) => ({\n  type: SELECT_CATEGORY_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getCategories = (): any => async (dispatch: any) => {\n  dispatch(getCategoriesStarted());\n  await ProductService.getCategories()\n    .then((res) => {\n      dispatch(getCategoriesSucceeded(res));\n    })\n    .catch(() => {\n      dispatch(getCategoriesFailed('error.response'));\n    });\n};\n\n//Get Single Product\nconst getSingleStarted = () => ({\n  type: GET_PRODUCT_DETAILS_STARTED\n});\n\nconst getSingleSucceeded = (data: any) => ({\n  type: GET_PRODUCT_DETAILS_SUCCEEDED,\n  payload: data\n});\n\nconst getSingleFailed = (error: string) => ({\n  type: GET_PRODUCT_DETAILS_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getSingleProduct =\n  (id: string | undefined): any =>\n  async (dispatch: any) => {\n    dispatch(getSingleStarted());\n    await ProductService.getSingleProduct(id)\n      .then((res) => {\n        dispatch(getSingleSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(getSingleFailed('error.response'));\n      });\n  };\n\n//Get Product Sorting\nconst getProductSortStarted = () => ({\n  type: GET_PRODUCT_SORT_STARTED\n});\n\nconst getProductSortSucceeded = (data: any) => ({\n  type: GET_PRODUCT_SORT_SUCCEEDED,\n  payload: data\n});\n\nconst getProductSortFailed = (error: string) => ({\n  type: GET_PRODUCT_SORT_FAILED,\n  payload: error,\n  error: true\n});\n\n  export const getProductSortProduct =\n  (sort: string): any =>\n  async (dispatch: any) => {\n    dispatch(getProductSortStarted());\n    await ProductService.getProductSortProduct(sort)\n      .then((res) => {\n        dispatch(getProductSortSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(getProductSortFailed('error.response'));\n      });\n  };\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/lib/constants/actionTypes.ts","/Users/mac/Documents/Projects/tech-test/src/services/api/index.ts","/Users/mac/Documents/Projects/tech-test/src/services/api/api.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/routes/index.tsx",{"fileContent":"import { Routes, Route } from 'react-router-dom';\nimport { Cart, Home, ProductDetail, Products } from '../containers';\nimport {\n  CART_ROUTE,\n  PRODUCTS_ROUTE,\n  ROOT_ROUTE,\n  PRODUCT_DETAILS_ROUTE\n} from '../lib/constants/routes';\n\nfunction ShoppingRoutes() {\n  return (\n    <Routes>\n      <Route path={ROOT_ROUTE} element={<Home />} />\n      <Route path={PRODUCTS_ROUTE} element={<Products />} />\n      <Route path={PRODUCT_DETAILS_ROUTE} element={<ProductDetail />} />\n      <Route path={CART_ROUTE} element={<Cart />} />\n    </Routes>\n  );\n}\n\nexport default ShoppingRoutes;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/containers/index.ts","/Users/mac/Documents/Projects/tech-test/src/lib/constants/routes.ts","/Users/mac/Documents/Projects/tech-test/src/containers/Home/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Products/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/ProductDetail/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Cart/index.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/containers/Cart/index.tsx",{"fileContent":"import {\n  Button,\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField\n} from '@material-ui/core';\nimport '../../css/cart.css';\nimport TableIcon from '../../components/Icons/tableicon.svg';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport { getCarts } from '../../actions';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Carts } from '../../interfaces';\n\nconst rows = [\n  {\n    name: 'Classic Blouse IX',\n    price: '$99',\n    quantity: '2',\n    total: '$198'\n  },\n  {\n    name: 'Classic Blouse IX',\n    price: '$99',\n    quantity: '2',\n    total: '$198'\n  },\n  {\n    name: 'Classic Blouse IX',\n    price: '$99',\n    quantity: '2',\n    total: '$198'\n  }\n];\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n\n  const cartsList = useSelector((state: Carts) => state.cartData.carts);\n\n  useEffect(() => {\n    const cartId = localStorage.getItem('cartId');\n    console.log('cartId', cartId);\n    if (!cartId) return;\n    dispatch(getCarts(cartId));\n  }, []);\n\n  console.log('cartsList', cartsList);\n\n  return (\n    <Grid className=\"heading\" data-testid = \"cart\">\n      <Grid className=\"carttitle\">Cart</Grid>\n      <TableContainer component={Paper} className=\"tablecontainer\">\n        <Table aria-label=\"simple table\">\n          <TableHead className=\"tablehead\">\n            <TableRow className=\"tablerow\">\n              <TableCell style={{ color: 'white', fontWeight: 700, fontSize: '24px' }}>\n                Product Name\n              </TableCell>\n              <TableCell\n                align=\"right\"\n                style={{ color: 'white', fontWeight: 700, fontSize: '24px' }}\n              >\n                Price\n              </TableCell>\n              <TableCell\n                align=\"right\"\n                style={{ color: 'white', fontWeight: 700, fontSize: '24px' }}\n              >\n                Quantity\n              </TableCell>\n              <TableCell\n                align=\"right\"\n                style={{ color: 'white', fontWeight: 700, fontSize: '24px' }}\n              >\n                Total\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody className=\"tablebody\">\n            {rows.map((option) => (\n              <TableRow key={option.name}>\n                <TableCell component=\"th\" scope=\"row\" style={{ fontWeight: 700, fontSize: '24px' }}>\n                  {' '}\n                  <img src={TableIcon} alt=\"\" /> {option.name}{' '}\n                </TableCell>\n                <TableCell align=\"right\" style={{ fontWeight: 700, fontSize: '24px' }}>\n                  {option.price}\n                </TableCell>\n                <TableCell align=\"right\" style={{ fontWeight: 700, fontSize: '24px' }}>\n                  {option.quantity}\n                </TableCell>\n                <TableCell align=\"right\" style={{ fontWeight: 700, fontSize: '24px' }}>\n                  {option.total} <DeleteIcon />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Grid container spacing={3} xs={12} className=\"cartcontainer\">\n        <Grid item md={8}>\n          <div className=\"boxsize\">\n            <Typography className=\"coupon\"> Have a Coupon? </Typography>\n            <TextField\n              id=\"outlined-basic\"\n              variant=\"outlined\"\n              className=\"cartinput\"\n              inputProps={{ style: { border: '1 px #F86338 ! important' } }}\n            />\n            <div style={{ paddingTop: '20px' }}>\n              <Button variant=\"contained\" style={{ backgroundColor: '#F86338', color: 'white' }}>\n                Apply Coupon\n              </Button>\n            </div>\n          </div>\n        </Grid>\n        <Grid item md={4}>\n          <Typography className=\"cartTotals\">Cart Totals</Typography>\n          <Grid container spacing={3} style={{ marginBottom: '15px' }}>\n            <Grid item md={3}>\n              <Typography className=\"subtotal\">Subtotal </Typography>\n            </Grid>\n            <Grid item sm={9}>\n              <Typography className=\"cartsubtotal\">$150</Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} style={{ marginBottom: '15px' }}>\n            <Grid item md={3}>\n              <Typography className=\"subtotal\"> Shipping </Typography>\n            </Grid>\n            <Grid item sm={9}>\n              <Typography className=\"cartsubtotal\">Free Shipping</Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} style={{ marginBottom: '25px' }}>\n            <Grid item md={3} />\n            <Grid item sm={6}>\n              <Typography className=\"cartsubtotal\">Shipping to Sidney</Typography>\n            </Grid>\n            <Grid item sm={2}>\n              <Typography className=\"changetext\">Change</Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} style={{ marginBottom: '15px' }}>\n            <Grid item md={3}>\n              <Typography className=\"subtotal\"> Total </Typography>\n            </Grid>\n            <Grid item sm={9}>\n              <Typography className=\"subtotal\">$350</Typography>\n            </Grid>\n          </Grid>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            style={{ backgroundColor: '#F86338', color: 'white', width: '488px' }}\n          >\n            Checkout\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Cart;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/actions/index.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts","/Users/mac/Documents/Projects/tech-test/src/actions/productActions.tsx","/Users/mac/Documents/Projects/tech-test/src/actions/cartActions.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/containers/Home/Product.tsx",{"fileContent":"import { FavoriteBorderOutlined } from '@material-ui/icons';\nimport SlideImage from '../../components/image/image.svg';\n\nconst Product = () => {\n  return (\n    <div className=\"product-container\">\n      <div className=\"circle\" />\n      <img alt=\"\" src={SlideImage} />\n\n      <div className=\"info\">\n        <div className=\"icon\">\n          <FavoriteBorderOutlined style={{ color: '#F86338' }} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Product;\n","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/src/containers/Home/index.tsx",{"fileContent":"import Hero from './Hero';\nimport HomeProducts from './HomeProducts';\nimport Slider from './Slider';\nimport '../../css/home.css';\n\nconst Home = () => {\n  return (\n    <div data-testid=\"home\">\n      <Hero />\n      <HomeProducts />\n      <Slider />\n    </div>\n  );\n};\nexport default Home;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/containers/Home/Hero.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/HomeProducts.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/Slider.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/Product.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/containers/ProductDetail/index.tsx",{"fileContent":"import { Params, useParams } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  Grid,\n  MenuItem,\n  TextField,\n  IconButton,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from '@material-ui/core';\nimport '../../css/productdetails.css';\nimport { Add, Remove } from '@material-ui/icons';\nimport { useEffect, useState } from 'react';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport TrueIcon from '../../components/Icons/trueicon.svg';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addCart, getSingleProduct, updateCart } from '../../actions';\nimport { IProduct } from '../../interfaces';\n\nconst option = ['XS', 'S', 'ML', 'L', 'XL'];\n\nconst ProductDetail = () => {\n  const { id } = useParams<Params<string>>();\n\n  const product = useSelector((state: IProduct) => state.productData.product);\n\n  const dispatch = useDispatch();\n  const [countValue, setCountvalue] = useState(1);\n  const [optionvalue, setOptionValue] = useState(option[0]);\n\n  useEffect(() => {\n    dispatch(getSingleProduct(id));\n  }, [id]);\n\n  const handleAddToCart = () => {\n    const payload = {\n      userId: 5,\n      date: new Date(),\n      products: [{ productId: id, quantity: countValue }]\n    };\n    const cartId = localStorage.getItem('cartId');\n    if (cartId) {\n      dispatch(updateCart(cartId, payload)); // update\n    } else {\n      dispatch(addCart(payload));\n    }\n  };\n\n  return (\n    <>\n      <Grid className=\"wrapper\">\n        <Grid className={'imagecontainer'}>\n          <Grid className={'image'}>\n            <img src={product.image} alt=\"\" />\n          </Grid>\n        </Grid>\n        <Grid className={'infocontainer'}>\n          <Typography variant=\"h4\" className=\"titledetails\">\n            {product.title}\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item md={3}>\n              <Typography className=\"avalibility\"> Avaliability </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <Typography className=\"availimeasure\"> : 48 in stocks </Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} style={{ marginBottom: '15px' }}>\n            <Grid item md={4}>\n              <Typography className=\"dollar\"> {product.price} </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <Typography className=\"canceldollar\"> $1500 </Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} style={{ marginBottom: '15px' }}>\n            <Grid item md={1}>\n              <Typography className=\"sku\">SKU </Typography>\n            </Grid>\n            <Grid item sm={11}>\n              <Typography className=\"skuresponse\">: AA0031</Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} style={{ marginBottom: '15px' }}>\n            <Grid item md={2}>\n              <Typography className=\"sku\"> {product.category} </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <Typography className=\"skuresponse\">: Dresses</Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} style={{ marginBottom: '25px' }}>\n            <Grid item md={1}>\n              <Typography className=\"sku\"> Tags </Typography>\n            </Grid>\n            <Grid item sm={11}>\n              <Typography className=\"skuresponse\">: Fashion, Classic, Blouses, Dresses </Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3} style={{ marginBottom: '25px' }}>\n            <Grid className=\"InputField\" item md={4}>\n              <TextField\n                size=\"small\"\n                select\n                style={{ width: '125px' }}\n                variant=\"outlined\"\n                value={optionvalue}\n                onChange={(event) => {\n                  setOptionValue(event.target.value);\n                }}\n              >\n                {option.map((option) => (\n                  <MenuItem key={option} value={option}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid className=\"plusminusCard\" item sm={5}>\n              <IconButton\n                className=\"plusMinusbutton\"\n                size=\"small\"\n                onClick={() => {\n                  if (countValue === 1) return;\n                  setCountvalue(countValue - 1);\n                }}\n              >\n                <Remove />\n              </IconButton>\n              <TextField\n                className=\"textshow\"\n                variant=\"standard\"\n                type=\"number\"\n                value={countValue}\n                style={{ width: '50px', marginLeft: '25px' }}\n                InputProps={{\n                  disableUnderline: true\n                }}\n              />\n              <IconButton\n                className=\"plusMinusbutton\"\n                size=\"small\"\n                onClick={() => {\n                  setCountvalue(countValue + 1);\n                }}\n              >\n                <Add />\n              </IconButton>\n            </Grid>\n            <Grid item sm={2}>\n              {' '}\n              <Typography style={{ color: '#F3692E', fontWeight: 700, fontSize: '16px' }}>\n                Add note\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3}>\n            <Grid className=\"addtocart\" item md={5}>\n              <Button\n                variant=\"contained\"\n                className=\"button\"\n                onClick={handleAddToCart}\n                style={{ backgroundColor: '#F86338', color: 'white' }}\n              >\n                Add to Cart\n                <ShoppingCartIcon style={{ marginLeft: '23px' }} />\n              </Button>\n            </Grid>\n            <Grid className=\"starbutton\" item sm={5}>\n              <Button variant=\"outlined\" className=\"starbutton\" style={{ color: '#F86338' }}>\n                <StarBorderIcon />\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid className=\"descriptionWrapper\">\n        <hr />\n        <Grid container spacing={3} style={{ marginTop: '15px' }}>\n          <Grid item md={6}>\n            <Typography className=\"descriptiontitle\"> Description </Typography>\n            <p>{product.description}</p>\n          </Grid>\n          <Grid item sm={6}>\n            <Typography className=\"descriptiontitle\"> Fabric Details </Typography>\n            <Grid item xs={12} md={6} style={{ marginLeft: '40px' }}>\n              <div>\n                <List>\n                  <ListItem>\n                    <ListItemIcon>\n                      <img src={TrueIcon} alt=\"\" />\n                    </ListItemIcon>\n                    <ListItemText primary=\"100% Cotton\" />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon>\n                      <img src={TrueIcon} alt=\"\" />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Quick Dry\" />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon>\n                      <img src={TrueIcon} alt=\"\" />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Ties as Shoulder\" />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon>\n                      <img src={TrueIcon} alt=\"\" />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Accusantium doloremque \" />\n                  </ListItem>\n                </List>\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\nexport default ProductDetail;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/actions/index.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts","/Users/mac/Documents/Projects/tech-test/src/actions/productActions.tsx","/Users/mac/Documents/Projects/tech-test/src/actions/cartActions.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/components/Header/index.tsx",{"fileContent":"import { Avatar, Grid, Typography, Link as Anchor } from '@material-ui/core';\nimport CallIcon from '@material-ui/icons/Call';\nimport HeaderIcon from '../Icons/Headerlogo.svg';\nimport '../../css/header.css';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\nimport { Link } from 'react-router-dom';\n\nconst avtarname = ['Fb', 'Tw', 'Ig', 'Yt'];\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Header = (props: any) => {\n  const { renderlocation } = props;\n\n  return (\n    <div data-testid = \"header\">\n      <Grid container spacing={3} xs={12}>\n        <Grid item sm={3}>\n          <Typography className=\"mobilephone\">\n            <CallIcon style={{ paddingTop: '10px' }} />\n            +022 319 821 967\n          </Typography>\n        </Grid>\n        <Grid item sm={6}>\n          <div className=\"headerlogo\">\n            <img src={HeaderIcon} alt=\"\" />\n          </div>\n        </Grid>\n        <Grid item sm={3}>\n          <div className=\"avtar\">\n            {avtarname.map((name, i) => (\n              <Avatar key={i} className=\"avtarlogo\">\n                {name}\n              </Avatar>\n            ))}\n          </div>\n        </Grid>\n      </Grid>\n      <div style={{ paddingLeft: '90px', paddingTop: '10px' }}>{renderlocation}</div>\n      \n      <Grid container xs={12}>\n        <Grid item sm={9}>\n          <div className=\"details\">\n            <Anchor href=\"\" className=\"homepage\" color=\"textPrimary\">\n              Home\n            </Anchor>\n            <Anchor href=\"\" className=\"homepage\" color=\"textPrimary\">\n              About\n            </Anchor>\n            <Anchor href=\"\" className=\"homepage\" color=\"textPrimary\">\n              FAQ\n            </Anchor>\n            <Anchor href=\"\" className=\"homepage\" color=\"textPrimary\">\n              Blog\n            </Anchor>\n          </div>\n        </Grid>\n        <Grid item sm={3}>\n          <div className=\"iconsection\">\n            <Link to=\"/products\" className=\"homepage\" color=\"textPrimary\">\n              <FavoriteBorderIcon style={{ marginRight: '33px' }} fontSize=\"medium\" />\n            </Link>\n            <Link to=\"/cart\" className=\"homepage\" color=\"textPrimary\">\n              <ShoppingCartIcon style={{ marginRight: '33px' }} fontSize=\"medium\" />\n            </Link>\n            <PermIdentityIcon fontSize=\"medium\" />\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\nexport default Header;\n","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/src/containers/Home/Slider.tsx",{"fileContent":"import React from 'react';\nimport { FavoriteBorderOutlined } from '@material-ui/icons';\nimport SlideImage from '../../components/image/image.svg';\nimport Carousel from 'better-react-carousel';\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core';\n\nconst test = [\n  {\n    id: 1,\n    image: SlideImage\n  },\n  {\n    id: 2,\n    image: SlideImage\n  },\n  {\n    id: 3,\n    image: SlideImage\n  },\n  {\n    id: 4,\n    image: SlideImage\n  },\n  {\n    id: 5,\n    image: SlideImage\n  },\n  {\n    id: 6,\n    image: SlideImage\n  },\n  {\n    id: 7,\n    image: SlideImage\n  }\n];\nconst Slider = () => {\n  return (\n    <div data-testid=\"slider\">\n    <Carousel cols={4} rows={1} gap={0} loop>\n      {test.map((test, index) => {\n        return (\n          <Carousel.Item key={index}>\n            <Card className=\"card\">\n              <CardMedia className=\"media\" image={test.image}>\n                <div className=\"icon\">\n                  <FavoriteBorderOutlined style={{ color: '#F86338' }} />\n                </div>\n              </CardMedia>\n              <CardContent className=\"cardContent\">\n                <Typography variant=\"subtitle2\" style={{ color: '#F3692E' }}>\n                  Bags\n                </Typography>\n                <Typography variant=\"h5\">Queen’s Summer</Typography>\n                <Typography variant=\"subtitle2\" style={{ color: '#515151' }}>\n                  Medium Shoulder Bag\n                </Typography>\n                <Typography variant=\"subtitle1\" style={{ color: '#F3692E' }}>\n                  $1000\n                </Typography>\n              </CardContent>\n            </Card>\n          </Carousel.Item>\n        );\n      })}\n    </Carousel>\n    </div>\n  );\n};\nexport default Slider;\n","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/src/reducers/productReducer.tsx",{"fileContent":"import {\n  GET_PRODUCTS_FAILED,\n  GET_PRODUCTS_STARTED,\n  GET_PRODUCTS_SUCCEEDED,\n  GET_PRODUCT_DETAILS_FAILED,\n  GET_PRODUCT_DETAILS_STARTED,\n  GET_PRODUCT_DETAILS_SUCCEEDED,\n  SELECT_CATEGORY_STARTED,\n  SELECT_CATEGORY_SUCCEEDED,\n  SELECT_CATEGORY_FAILED,\n  GET_SPECIFIC_PRODUCTS_STARTED,\n  GET_SPECIFIC_PRODUCTS_SUCCEEDED,\n  GET_SPECIFIC_PRODUCTS_FAILED,\n  GET_PRODUCT_SORT_STARTED,\n  GET_PRODUCT_SORT_SUCCEEDED,\n  GET_PRODUCT_SORT_FAILED,\n} from '../lib/constants/actionTypes';\nimport initialState from './initialState';\n\nconst productReducer = (\n  state = initialState.productData,\n  action: { type: string; payload: object }\n) => {\n  switch (action.type) {\n    case GET_PRODUCTS_STARTED:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case GET_PRODUCTS_SUCCEEDED:\n      return {\n        ...state,\n        products: action.payload,\n        isLoading: false\n      };\n    case GET_PRODUCTS_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n\n    case GET_PRODUCT_DETAILS_STARTED:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case GET_PRODUCT_DETAILS_SUCCEEDED:\n      return {\n        ...state,\n        product: action.payload,\n        isLoading: false\n      };\n    case GET_PRODUCT_DETAILS_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n\n    case SELECT_CATEGORY_STARTED:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case SELECT_CATEGORY_SUCCEEDED:\n      return {\n        ...state,\n        product: action.payload,\n        isLoading: false\n      };\n    case SELECT_CATEGORY_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n\n    case GET_SPECIFIC_PRODUCTS_STARTED:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case GET_SPECIFIC_PRODUCTS_SUCCEEDED:\n      return {\n        ...state,\n        products: action.payload,\n        isLoading: false\n      };\n    case GET_SPECIFIC_PRODUCTS_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n\n      case GET_PRODUCT_SORT_STARTED:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case GET_PRODUCT_SORT_SUCCEEDED:\n      return {\n        ...state,\n        products: action.payload,\n        isLoading: false\n      };\n    case GET_PRODUCT_SORT_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default productReducer;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/lib/constants/actionTypes.ts","/Users/mac/Documents/Projects/tech-test/src/reducers/initialState.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/setupTests.ts",{"fileContent":"// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/__tests__/header.test.tsx",{"fileContent":"import React from 'react';\nimport { cleanup, render, screen } from '@testing-library/react';\nimport Header from '../src/components/Header/index';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nafterEach(() => {\n  cleanup(); // Resets the DOM after each test suite\n})\n\nconst TestComponent = () => {\n  return <Header />;\n};\n\ndescribe(\"Header Component\" ,() => {\n  render(\n    <Router>\n    <TestComponent/>\n    </Router>\n  ); \n  const headerEle = screen.getByTestId(\"header\"); \n    \n  // Test 1\n  test(\"Header Rendering\", () => {\n      expect(headerEle).toBeInTheDocument(); \n  })\n\n});\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/components/Header/index.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/components/index.ts",{"fileContent":"export { default as Footer } from './Footer';\nexport { default as Header } from './Header';\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/components/Footer/index.tsx","/Users/mac/Documents/Projects/tech-test/src/components/Header/index.tsx"]}],["/Users/mac/Documents/Projects/tech-test/src/containers/index.ts",{"fileContent":"export { default as Home } from './Home';\nexport { default as Products } from './Products';\nexport { default as ProductDetail } from './ProductDetail';\nexport { default as Cart } from './Cart';\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/containers/Home/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Products/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/ProductDetail/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Cart/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/Hero.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/HomeProducts.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/Slider.tsx","/Users/mac/Documents/Projects/tech-test/src/actions/index.ts","/Users/mac/Documents/Projects/tech-test/src/lib/pagination.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/actions/index.ts",{"fileContent":"export * from './productActions';\nexport * from './cartActions';\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/actions/productActions.tsx","/Users/mac/Documents/Projects/tech-test/src/actions/cartActions.tsx","/Users/mac/Documents/Projects/tech-test/src/lib/constants/actionTypes.ts","/Users/mac/Documents/Projects/tech-test/src/services/api/index.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/lib/constants/actionTypes.ts",{"fileContent":"// Get Products\nexport const GET_PRODUCTS_STARTED = 'GET_PRODUCTS_STARTED';\nexport const GET_PRODUCTS_SUCCEEDED = 'GET_PRODUCTS_SUCCEEDED';\nexport const GET_PRODUCTS_FAILED = 'GET_PRODUCTS_FAILED';\n\n// Get Product Details\nexport const GET_PRODUCT_DETAILS_STARTED = 'GET_PRODUCT_DETAILS_STARTED';\nexport const GET_PRODUCT_DETAILS_SUCCEEDED = 'GET_PRODUCT_DETAILS_SUCCEEDED';\nexport const GET_PRODUCT_DETAILS_FAILED = 'GET_PRODUCT_DETAILS_FAILED';\n\n// remove Product\nexport const REMOVE_PRODUCT_STARTED = 'REMOVE_PRODUCT_STARTED';\nexport const REMOVE_PRODUCT_SUCCEEDED = 'REMOVE_PRODUCT_SUCCEEDED';\nexport const REMOVE_PRODUCT_FAILED = 'REMOVE_PRODUCT_FAILED';\n\n//Get Specific Product\nexport const GET_SPECIFIC_PRODUCTS_STARTED = 'GET_SPECIFIC_PRODUCTS_STARTED';\nexport const GET_SPECIFIC_PRODUCTS_SUCCEEDED = 'GET_SPECIFIC_PRODUCTS_SUCCEEDED';\nexport const GET_SPECIFIC_PRODUCTS_FAILED = 'GET_SPECIFIC_PRODUCTS_FAILED';\n\n//Get All Categories\nexport const SELECT_CATEGORY_STARTED = 'SELECT_CATEGORY_STARTED';\nexport const SELECT_CATEGORY_SUCCEEDED = 'SELECT_CATEGORY_SUCCEEDED';\nexport const SELECT_CATEGORY_FAILED = 'SELECT_CATEGORY_FAILED';\n\n//Get Single Product\n\nexport const GET_SINGLE_PRODUCTS_STARTED = 'GET_SINGLE_PRODUCTS_STARTED';\nexport const GET_SINGLE_PRODUCTS_SUCCEEDED = 'GET_SINGLE_PRODUCTS_SUCCEEDED';\nexport const GET_SINGLE_PRODUCTS_FAILED = 'GET_SINGLE_PRODUCTS_FAILED';\n\n//Add Cart\nexport const ADD_CART_STARTED = 'ADD_CART_STARTED';\nexport const ADD_CART_SUCCEEDED = 'ADD_CART_SUCCEEDED';\nexport const ADD_CART_FAILED = 'ADD_CART_FAILED';\n\n//Update Cart\nexport const UPDATE_CART_STARTED = 'UPDATE_CART_STARTED';\nexport const UPDATE_CART_SUCCEEDED = 'UPDATE_CART_SUCCEEDED';\nexport const UPDATE_CART_FAILED = 'UPDATE_CART_FAILED';\n\n//get Carts\nexport const GET_CARTS_STARTED = 'GET_CARTS_STARTED';\nexport const GET_CARTS_SUCCEEDED = 'GET_CARTS_SUCCEEDED';\nexport const GET_CARTS_FAILED = 'GET_CARTS_FAILED';\n\n//sort Products\nexport const GET_PRODUCT_SORT_STARTED = 'GET_PRODUCT_SORT_STARTED';\nexport const GET_PRODUCT_SORT_SUCCEEDED = 'GET_PRODUCT_SORT_SUCCEEDED';\nexport const GET_PRODUCT_SORT_FAILED = 'GET_PRODUCT_SORT_FAILED';","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/src/services/api/index.ts",{"fileContent":"export * from './api';\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/services/api/api.tsx","/Users/mac/Documents/Projects/tech-test/src/services/fetch/index.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/services/fetch/index.ts",{"fileContent":"export * from './fetch';\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/services/fetch/fetch.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts","/Users/mac/Documents/Projects/tech-test/src/services/fetch/errorUnauthorized.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/services/fetch/fetch.ts",{"fileContent":"import { headerParams, IError } from '../../interfaces';\nimport ErrorUnauthorized from './errorUnauthorized';\n\nconst createFetchFor =\n  (init: RequestInit | undefined) =>\n  async (url: RequestInfo | URL, params = {}) => {\n    const { headers: HeaderParams = {}, ...rest }: headerParams = params;\n    const response = await fetch(url, {\n      headers: {\n        Accept: 'application/json',\n        ...HeaderParams\n      },\n\n      ...init,\n      ...rest\n    });\n    if (!response.ok) {\n      if (response.status === 401) {\n        throw new ErrorUnauthorized('Request Unauthorized. Please try again.');\n      }\n      const error = await response.json();\n      //  Build an API error object\n      const apiError: IError = new Error(error.message || 'Request failed. Please try again.');\n      apiError.name = 'ApiError';\n      apiError.code = error.errorCode;\n      apiError.type = error.errorType;\n      apiError.status = response.status;\n      apiError.ok = false;\n      throw apiError;\n    }\n    return await response.json();\n  };\n\nexport const get = createFetchFor({ method: 'GET' });\nexport const post = createFetchFor({ method: 'POST' });\nexport const put = createFetchFor({ method: 'PUT' });\nexport const del = createFetchFor({ method: 'DELETE' });\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts","/Users/mac/Documents/Projects/tech-test/src/services/fetch/errorUnauthorized.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/services/fetch/errorUnauthorized.ts",{"fileContent":"class ErrorUnauthorized extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ErrorUnauthorized';\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport default ErrorUnauthorized;\n","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/src/lib/pagination.ts",{"fileContent":"import { useState } from 'react';\nimport { productType } from '../interfaces';\n\nfunction usePagination(data: productType[], itemsPerPage: number) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const maxPage = Math.ceil(data.length / itemsPerPage);\n\n  function currentData() {\n    const begin = (currentPage - 1) * itemsPerPage;\n    const end = begin + itemsPerPage;\n    return data.slice(begin, end);\n  }\n\n  function next() {\n    setCurrentPage((currentPage) => Math.min(currentPage + 1, maxPage));\n  }\n\n  function prev() {\n    setCurrentPage((currentPage) => Math.max(currentPage - 1, 1));\n  }\n\n  function jump(page: number) {\n    const pageNumber = Math.max(1, page);\n    setCurrentPage(() => Math.min(pageNumber, maxPage));\n  }\n\n  return { next, prev, jump, currentData, currentPage, maxPage };\n}\n\nexport default usePagination;\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts"]}],["/Users/mac/Documents/Projects/tech-test/src/lib/constants/routes.ts",{"fileContent":"export const ROOT_ROUTE = '/';\nexport const PRODUCTS_ROUTE = '/products';\nexport const PRODUCT_DETAILS_ROUTE = '/product/:id';\nexport const CART_ROUTE = '/cart';\n","resolvedModuleNames":[]}],["/Users/mac/Documents/Projects/tech-test/__tests__/hero.test.tsx",{"fileContent":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport Hero from '../src/containers/Home/Hero';\n\ntest('Hero is rendered correctly', () => {\n  render(<Hero />);\n  const linkElement = screen.getByText(/We will help to develop every smallest thing into a/i);\n  expect(linkElement).toBeInTheDocument();\n});","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/containers/Home/Hero.tsx"]}],["/Users/mac/Documents/Projects/tech-test/__tests__/home.test.tsx",{"fileContent":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Home from '../src/containers/Home';\n\ntest('Home is rendered correctly', () => {\n  render(\n    <Router>\n      <Home/>\n  </Router>\n  );\n  const heroEle = screen.getByTestId('home');\n  expect(heroEle).toBeInTheDocument();\n});\n","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/containers/Home/index.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/Hero.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/HomeProducts.tsx","/Users/mac/Documents/Projects/tech-test/src/containers/Home/Slider.tsx"]}],["/Users/mac/Documents/Projects/tech-test/__tests__/cart.test.tsx",{"fileContent":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Cart from '../src/containers/Cart/index';\n\ntest('Cart is rendered correctly', () => {\n  render(\n    <Router>\n      <Cart/>\n  </Router>\n  );\n  const heroEle = screen.getByTestId('cart');\n  expect(heroEle).toBeInTheDocument();\n});","resolvedModuleNames":["/Users/mac/Documents/Projects/tech-test/src/containers/Cart/index.tsx","/Users/mac/Documents/Projects/tech-test/src/actions/index.ts","/Users/mac/Documents/Projects/tech-test/src/interfaces/index.ts"]}]]