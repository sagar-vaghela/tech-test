{"version":3,"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","names":["getProductsStarted","type","actionTypes_1","getProductsSucceeded","data","payload","getProductsFailed","error","getProducts","dispatch","ProductService","then","res","catch","_a","exports","getSpecificProductsStarted","getSpecificProductsSucceeded","getSpecificProductsFailed","getSpecificProducts","product","getCategoriesStarted","getCategoriesSucceeded","getCategoriesFailed","getCategories","getSingleStarted","getSingleSucceeded","getSingleFailed","getSingleProduct","id","getProductSortStarted","getProductSortSucceeded","getProductSortFailed","getProductSortProduct","sort"],"sources":["/Users/mac/Documents/Projects/tech-test/src/actions/productActions.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  GET_PRODUCTS_FAILED,\n  GET_PRODUCTS_STARTED,\n  GET_PRODUCTS_SUCCEEDED,\n  GET_PRODUCT_DETAILS_FAILED,\n  GET_PRODUCT_DETAILS_STARTED,\n  GET_PRODUCT_DETAILS_SUCCEEDED,\n  GET_SPECIFIC_PRODUCTS_STARTED,\n  GET_SPECIFIC_PRODUCTS_SUCCEEDED,\n  GET_SPECIFIC_PRODUCTS_FAILED,\n  SELECT_CATEGORY_STARTED,\n  SELECT_CATEGORY_SUCCEEDED,\n  SELECT_CATEGORY_FAILED,\n  GET_PRODUCT_SORT_STARTED,\n  GET_PRODUCT_SORT_SUCCEEDED,\n  GET_PRODUCT_SORT_FAILED,\n} from '../lib/constants/actionTypes';\nimport * as ProductService from '../services/api';\n\n// Get Product\nconst getProductsStarted = () => ({\n  type: GET_PRODUCTS_STARTED\n});\n\nconst getProductsSucceeded = (data: object) => ({\n  type: GET_PRODUCTS_SUCCEEDED,\n  payload: data\n});\n\nconst getProductsFailed = (error: string) => ({\n  type: GET_PRODUCTS_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getProducts = (): any => async (dispatch: any) => {\n  dispatch(getProductsStarted());\n  await ProductService.getProducts()\n    .then((res) => {\n      dispatch(getProductsSucceeded(res));\n    })\n    .catch(() => {\n      dispatch(getProductsFailed('error.response'));\n    });\n};\n\n//Get Specific Product\nconst getSpecificProductsStarted = () => ({\n  type: GET_SPECIFIC_PRODUCTS_STARTED\n});\n\nconst getSpecificProductsSucceeded = (data: object) => ({\n  type: GET_SPECIFIC_PRODUCTS_SUCCEEDED,\n  payload: data\n});\n\nconst getSpecificProductsFailed = (error: string) => ({\n  type: GET_SPECIFIC_PRODUCTS_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getSpecificProducts =\n  (product: string): any =>\n  async (dispatch: any) => {\n    dispatch(getSpecificProductsStarted());\n    await ProductService.getSpecificProducts(product)\n      .then((res) => {\n        dispatch(getSpecificProductsSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(getSpecificProductsFailed('error.response'));\n      });\n  };\n\n//Get Categories\nconst getCategoriesStarted = () => ({\n  type: SELECT_CATEGORY_STARTED\n});\n\nconst getCategoriesSucceeded = (data: object) => ({\n  type: SELECT_CATEGORY_SUCCEEDED,\n  payload: data\n});\n\nconst getCategoriesFailed = (error: string) => ({\n  type: SELECT_CATEGORY_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getCategories = (): any => async (dispatch: any) => {\n  dispatch(getCategoriesStarted());\n  await ProductService.getCategories()\n    .then((res) => {\n      dispatch(getCategoriesSucceeded(res));\n    })\n    .catch(() => {\n      dispatch(getCategoriesFailed('error.response'));\n    });\n};\n\n//Get Single Product\nconst getSingleStarted = () => ({\n  type: GET_PRODUCT_DETAILS_STARTED\n});\n\nconst getSingleSucceeded = (data: any) => ({\n  type: GET_PRODUCT_DETAILS_SUCCEEDED,\n  payload: data\n});\n\nconst getSingleFailed = (error: string) => ({\n  type: GET_PRODUCT_DETAILS_FAILED,\n  payload: error,\n  error: true\n});\n\nexport const getSingleProduct =\n  (id: string | undefined): any =>\n  async (dispatch: any) => {\n    dispatch(getSingleStarted());\n    await ProductService.getSingleProduct(id)\n      .then((res) => {\n        dispatch(getSingleSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(getSingleFailed('error.response'));\n      });\n  };\n\n//Get Product Sorting\nconst getProductSortStarted = () => ({\n  type: GET_PRODUCT_SORT_STARTED\n});\n\nconst getProductSortSucceeded = (data: any) => ({\n  type: GET_PRODUCT_SORT_SUCCEEDED,\n  payload: data\n});\n\nconst getProductSortFailed = (error: string) => ({\n  type: GET_PRODUCT_SORT_FAILED,\n  payload: error,\n  error: true\n});\n\n  export const getProductSortProduct =\n  (sort: string): any =>\n  async (dispatch: any) => {\n    dispatch(getProductSortStarted());\n    await ProductService.getProductSortProduct(sort)\n      .then((res) => {\n        dispatch(getProductSortSucceeded(res));\n      })\n      .catch(() => {\n        dispatch(getProductSortFailed('error.response'));\n      });\n  };\n"]}